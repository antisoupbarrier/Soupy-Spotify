from datetime import timedelta
from datetime import date
from datetime import datetime
from sys import breakpointhook
from xml.dom.minidom import AttributeList
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import os.path
import json

scope = "user-follow-read, playlist-modify-private"

client_id = "12c6e5ab3601483db07e0247b5888d02"
client_secret = "4afea61c3e814e209dc96d29976d77c1"

sp = spotipy.Spotify(auth_manager=SpotifyOAuth(scope=scope, client_id=client_id, client_secret = client_secret,redirect_uri="http://localhost:1084"))

print(sp.me())

def get_date(artist_albums):
    return artist_albums['release_date']

def get_album_track_uri(album):
    tracks = sp.album_tracks(album['uri'], limit=25, offset=0, market='US')
    track_uris = []
    for track in tracks['items']:
        track_uris.append(track['uri'])
    return track_uris

def isRelevant(albumName: str) -> bool:
    filters = ['TikTok', 'Playlist', 'Indie', 'Remix', 'Trending']
    for filter in filters:
        if filter in albumName:
            return False
    return True


#def add_all_tracks_to_playlist(user_id, new_playlist['id'], weekly_playlist_uris):
 #   
  #  add_all_tracks_to_playlist = False
   # while not all_tracks_on_playlist:
    #add_to_playlist = sp.user_playlist_add_tracks(user_id, new_playlist['id'], weekly_playlist_uris, position=None) #new_playlist['id']



# def get_album_top_track_uri(album):
#     tracks = sp.album_tracks(album['uri'], limit=20, offset=0, market='US')
#     top_track_uris = []
#     for track in tracks['items']:
#         top_track_uris.append(track['uri'])
#     return track_uris

# def get_user_top_artists():
#     top_artists = sp.current_user_top_artists(limit=20, offset=0, time_range='medium_term')
#     top_artists_uri = []
#     for 


f = open('album_cache.json', "r")
dictionary = json.load(f)
all_albums = dictionary["all_albums"]

all_albums.sort(key=get_date, reverse=True)
album_uris = []
weekly_playlist_uris = []
x = 0 #print counter set to 0
removed_results = 0 #filtered results
duplicate_uri = 0
for idx, album in enumerate(all_albums):  # these lines create a table of artist names
    artist_names = []
    skip = False
    # release_week = timedelta(days=6)
    # album_iso_date = date.fromisoformat(album['release_date'])
    # current_date = date.today()
    for uri in album_uris: # removes duplicate uri
        if album["uri"] == uri:
            skip = True
            duplicate_uri += 1
    for artist in album["artists"]: #filter artist name
        if ("Various Artists") in artist['name']:
            skip = True
        artist_names.append(artist['name'])
    if skip:
        continue
    album_uris.append(album['uri'])
    if isRelevant(album['name']): #album['name']
        release_week = timedelta(days=6)
        album_iso_date = date.fromisoformat(album['release_date'])
        current_date = date.today()
        if (album_iso_date + release_week) <= current_date:
            print(album)
            break
        else:
            track_uris = get_album_track_uri(album)
            for track_uri in track_uris:
                weekly_playlist_uris.append(track_uri)
               #print(x, " ~ ", album['name'], " ~ ", ", ".join(artist_names), " ~ ", album['album_type'], "(", album['total_tracks'], ")", " ~ ", album['release_date'], " ~ ", album['id'])
        x+=1
    else:
        removed_results += 1
       # print("removed_results")
        #print(x)
    
    # print("Results removed: ", removed_results, " - Duplicate URI: ", duplicate_uri)
    # print("That is all for the week")
    # print(weekly_playlist)
    # break
    if x == 100:
        print("Results removed: ", removed_results, " - Duplicate URI: ", duplicate_uri)
        print(weekly_playlist_uris)
        break


print(weekly_playlist_uris)

##create playlist & add weekly_playlist_uris to playlist
now = datetime.now()
date_time = now.strftime("%Y/%m/%d")
playlist_name = date.today()
user_id = sp.me()['id']
new_playlist = sp.user_playlist_create(user_id, date_time, public=False, collaborative=False, description='New music for the week ending on ' + date_time)
all_items_on_playlist = int(len(weekly_playlist_uris) / 100) + ((len(weekly_playlist_uris) % 100) > 0)
for i in range(0, all_items_on_playlist):
    sp.playlist_add_items(new_playlist['id'], weekly_playlist_uris[100*i:100*(i+1)], position=None)

#https://open.spotify.com/playlist/1lYvUDjo9QO5OhUPPRUWOb?si=78d8fa2f18b14681

